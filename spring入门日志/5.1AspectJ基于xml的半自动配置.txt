AspectJ是面向AOP的一种框架
Aspectj提供了切入点表达式
可以使用注解配置切入点

各种通知的具体写法以及对应xml的写法：
    public void before(JoinPoint joinPoint){
    //JoinPoint是可选参数，该引用没有放行方法
        System.out.println("前置通知"+joinPoint);
    }
    public void after(){
        System.out.println("最终通知");
    }
    public Object around(ProceedingJoinPoint pjp) throws Throwable {
    //ProceedingJoinPoint是环绕通知必选参数，该引用可以放行方法
        System.out.println("环绕通知"+pjp);
        Object proceed = pjp.proceed();
        System.out.println("环绕通知");
        return proceed;
    }
    public void afterRun(Object obj){
    //Object参数可选，为proceed方法的返回值
        System.out.println("后置通知");
    }
    public void afterThrow(JoinPoint joinPoint,Throwable e){
        System.out.println("异常通知"+joinPoint);
    }

<aop:config>
        <aop:aspect ref="aspectJ">
            <aop:pointcut id="myPointcut" expression="execution(* com.jacketzc.dao.*.*(..))"/>
            <aop:before method="before" pointcut-ref="myPointcut"/>
            <aop:after-returning method="afterRun" pointcut-ref="myPointcut" returning="obj"/>
            <aop:after method="after" pointcut-ref="myPointcut"/>
            <aop:around method="around" pointcut-ref="myPointcut"/>
            <aop:after-throwing method="afterThrow" throwing="e" pointcut-ref="myPointcut"/>
        </aop:aspect>
    </aop:config>
//aop:pointcut并非必须配置的东西，它是为了方便之后的通知使用pointcut-ref来配置切入点，当然，各种通知可以自定义切入点